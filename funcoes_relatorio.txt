Convém abordar primeiro as funções com asterisco aqui, para quem ler ter algum contexto. (essencialemente funcoes auxiliares ou perto disso)

@sim_nao* - função para obter um SIM ou NAO do user. Muito utilizada
remover_espacos e separar_parametros - Importantes a carregar os dados, mas fazem o mesmo que o strtok
    SUBLINHAR o facto de que quando foram feitas, ainda não sabíamos da existêencia do strtok e pensavamos que tinhamos que fazer tudo à "unha"
        ALÉM DISSO, elas funcionam bem, por isso, deixámo-las estar;
@limpar_buffer* - Limpa o buffer de entrada, muito utilizada;
@limpar_terminal* e pressione_enter* - limpa o terminal, muito usada;
colocar_terminal_utf8* - usada apenas no inicio para permitir acentos, etc;
verificar_primeiro_erro - essencialmente escreve o cabeçalho no ficheiro de erros;
@1string_para_xxxx* - Importantes nas conversões, fazem validacoes, usadas ao carregar os ficheiros e não so;
@calcular_dia_da_semana, @calcular_quarta_feira_cinzas, calcular_quaresma - haver com datas, fazem o que dizem;
obter_separador - detalhe das listagens, ESCREVE o cabeçalho;
@calcular_idade - calcula a idade atual usando a DATA_ATUAL(var global) que é atualizada em data_atual(), que:
    -usa a biblioteca <time.h> para obter a data do sistema;
normalizar_string - era suposto colocar tudo a minúsculas e tirar os acentos mas a ultima parte não esta a funcionar;
inicializar_xxxx - inicializa as structs com dados visivelmente inválidos;
free_aluno - liberta a memória dinamica do nome e nacionalidade, importante na questão de sair do programa;
realocar_xxxx - realoca xxxx conforme as necessidades;
@procurar_codigo_aluno!!!!! - explicar ao detalhe os seus retornos, a complexidade temporal e porque foi escolhida;
procurar_codigo_escolares - igual mas por alto;
@procurar_nacionalidades! - uma função que apesar de não ser muito usada, é algo complexa. Pede nacionalidade e faz diversas validacoes e pesquisas;
funcoes de validacoes - fazem o que dizem; realçar a @validar_nome_ficheiro já que é algo diferente;
funcoes de verificacao - dizem o que fazem, mas convém detalhar a lógica, principalmente de @verificar_codigos_escolares_sem_aluno(é mais complexa);
@comparar_data* - função generalizada, fácil de entender.
//FUNCOES DE ORDENACAO MERGE SORT 
Explicar que foi basicamente copiado o algoritmo e ajustado ao nosso código, já que não faria sentido estar a reinventar a roda; //
ordenar_ao_inserir e ordenar_ao_eliminar - mesma lógica mas em sentidos contrários, realçar o bug que havia em que estava a ser libertada a memória de um ponteiro duplicado;
mostrar_menu!!! - função base para todos os menus. Muito simples de ver, mas tem que se explicar, principalmente a parte de passar uma função como argumento;
//FUNCOES DOS MENUS void
simplesmentye printam o menu;c //
@the_architect!! - nome é referencia ao filme matrix btw, é o coração do programa, apresenta o menu inicial e a partir daí apresenta tudo o resto.
//FUNCOES DE processar
todas iguais exceto estatisticas. Apresentam menu e escolhem funcionalidade
@estatisticas - ver comentario; //
@ler_data - ta no nome;
@inserir_estudante - colocar no relatorio apenas um excerto, porque o resto é igual mas para parametros diferentes. Realçar a lógica com os do while;
eliminar_estudante - facil;
atualizar_estudante - em progresso;
@calcular_estatisticas - poupa várias iterações O(n);
@tabela_medias_ano - ver lógica com os arrays;
@listar!! - função base para todas as listagens;
//FUCOES DE LISTAGEM
pode se ver uma ou outra
//
@ler_linha_txt* - explicar que é muiti importante para ler linhas de ficheiros ou do teclado sem estourar o buffer(sem limite);
@(metade)carregar_dados - dizer que carrega os dados tratando da respetiva validaçao e ordenação (está dividida em duas partes, que são idênticas mas com os parametros diferentes)
    abordar ainda o facto de tratar de listar os erros no ficheiro erros.txt;
@guardar_dados - importante mas ainda não está finalizada.
@pedir_listagem - Trata de fazer as validações necessárias para abrir uma listagem, caso seja pedida(ver+, é fácil);