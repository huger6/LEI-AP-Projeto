DÚVIDAS:
-Manter o ficheiro aberto durante as operações em memória ou fecha-lo e reabri-lo mais tarde? Abrir. fechar. Abrir, fechar
!!!Os ficheiros podem ter alunos diferentes???? Pode haver alunos sem situacao escolar mas vice versa nao
-Podemos trabalhar essencialmente com os códigos e assumir que se o código está livre, os outros parametros também o estão??
-Usar uma struct para guardar o estado do programa, como erros, e caso seja crítico, sair do mesmo, NÂO É NECESSÁRIO
______________________________________________________________________________________________________________

NOTAS:
short - hd
unsigned short - hu

//Se der NULL em todos os modos de abertura, quer dizer que há um erro crítico. Dar manage
//Se não der nulo nos outros modos de abertura quer dizer que o ficheiro não existia e foi criado

______________________________________________________________________________________________________________

A IMPLEMENTAR:
-Pedir confirmação antes de sair do programa
-Para a ultima pergunta podemos usar um array dentro de um array, basicamente aquilo é uma matriz, ou entao fazer da forma "convencional"
-REVER METODO LER INPUTS!!
-LIMPAR O BUFFER APÓS CADA OPERAÇÃO BÁSICA
-Dar uma vista de olhos pelas mensagens de erro e talvez aprimorá-las
-mecanismo de avanço página a página: printar 20, pausa, enter, repeat (ver depois)
-DEVEMOS GUARDAR EM FICHEIROS TXT E BINÁRIO!! DEVE SER UMA OPÇÃO
-Talvez seja uma boa ideia voltar a criar uma struct para os dados escolares
-Nacionalidades devem ser variadas, e não devem ser verificadas
-Uso de atoi e strtol esta correto. Se falharem, devemos passar a linha
-Fazer a verificação na leitura se não tem nenhum tab, se tiver, classificar a entrada como inválida.
-Devemos assumir que os dados que estão nos ficheiros estaraão corretos? Alguns, como espaços e no caso do user inserir espaço entre os nomes
-Talvez seja benéfico adicionar mais caracteres na leitura da data de nascimento
-O que fazer no caso de um dado estar inválido? COPIAR PARA UM FICHEIRO DE ERROS
!!-Procurar código com procura binária e ordenar sempre o vetor após cada edição do estudante
-Na listagem com avanço página a página, podemos fazer com que cada 20 linhas sejam guardadas num array novo (em baixo)
ex: temos 201 linhas para listar, fazíamos 201 % 20 = 1, e depois fazíamos for (int i = 0; i < (201-1)/20;i++) e aí guardavamos um array com a info,
e depois obtemos o último array com 1 linha apenas, e com isso, através dos índices dos i's, podemos fazer com que o user avance ou ande para trás na pag
poderia ser criado uma espécie de legenda para o user saber os comandos (possível, mas para melhor eficiência não usar arrays)
-Vamos ASSUMIR que se o aluno não for eliminado, O CÓDIGO NÃO PODERÁ SER ALTERADO
-Carregar, ordenar e depois validar o codigo de escolares
-Usar o merge sort porque mantém a ordem inicial
-Mais eficiente e escolhemos esta porque por norma não haverá muitos duplicados
______________________________________________________________________________________________________________

BUGS:


______________________________________________________________________________________________________________

FUTURAMENTE:

-opcao linguagem