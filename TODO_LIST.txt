DÚVIDAS:
-Verificar dúvida do bug da linha incompleta em erros.txt.
-Carregar os ficheiros deve ser uma opção no menu ou deve ser sempre feito no início?
-Os ficheiros a carregar podem ter nomes especificados pelo utilizador?
-ver string_to_int
-Acentos():
    Ou faço uma função para retirar acentos apenas quando for usar comparações entre strings (mais viável) (usar iconv.h, se for permitido)
    Ou faço uma função para verificar se o nome tem acentos (menos viável e muito mais trabalhoso) -> teria que ser implementado em carregar_dados, inseerir_estudante e quando se pede nome/nacionalidade.

______________________________________________________________________________________________________________

NOTAS:
short - hd
*(array)@num_elementos - Usar esta expressão na aba de watch ao dar debug para ver o conteúdo de cada elemento do array
scanf deixa o \n no buffer

//Se der NULL em todos os modos de abertura, quer dizer que há um erro crítico. Dar manage
//Se não der nulo nos outros modos de abertura quer dizer que o ficheiro não existia e foi criado

______________________________________________________________________________________________________________

A IMPLEMENTAR:
-Pedir confirmação antes de sair do programa
-Para a ultima pergunta podemos usar um array dentro de um array, basicamente aquilo é uma matriz, ou entao fazer da forma "convencional"
-Dar uma vista de olhos pelas mensagens de erro e talvez aprimorá-las
-DEVEMOS GUARDAR EM FICHEIROS TXT E BINÁRIO!! DEVE SER UMA OPÇÃO
-
-Talvez seja uma boa ideia voltar a criar uma struct para os dados escolares

-Mais eficiente e escolhemos esta porque por norma não haverá muitos duplicados
-Para o menu podemos usar a struct atual dentro de Uni e definir vários char, tipo p, g, e, x, ...
-Realçar o erro na linha em erros.txt
-verificar_codigoss_escolares_sem_aluno pode ser mais eficiente(ver comentário)
-

______________________________________________________________________________________________________________

BUGS:

O PRIMEIRO ELEMENTO DO ARRAY ESTÁ A FICAR EM BRANCO
LIMPAR_BUFFER NA INSERÇÃO DE ESTUDANTES (do nome)
faltam \n's antes das mensagens de erro nas validações.
quando um código é inválido temos de colocar o pressione enter
validar_nacionalidade está a dar uma mensagem seguida e temos de dar 2 espaços para avançar.
ao inserir estudantes e clicar em repetir, o programa sai??
-Nome: 1\n ; Nascimento: 2\n ; media_atual: 2\n
-No ficheiro de erros, a ultima linha fica sem o \n (acontece porque o \n é lido em ler_linha_txt (já nao))

#BUG DA LINHA CORTADA @RESOLVIDO
-a linha com gabriel carvalho está a ser cortada ao meio aparentemente sem razaão alguma, é a única
SE A LINHA TIVER A MESMA FORMATAÇÃO DE ESPAÇOS QUE A DO GABRIEL TAMBEM DA ERRO
Se não houver espaço antes de Gabriel a linha já aparece toda(remover espacos deve estar a funcionar mal)

Problema: A linha estava a ser alterada pelos outros ponteiros em separar_parametros.
Solução: Copiar a linha e trabalhar com uma cópia de modo a preservar os dados originais.

#BUG AO INSERIR_ESTUDANTE @RESOLVIDO TEMPORARIAMENTE
-Codigo entra bem 
-Nome, dou enter, enter, enter
-data, dou enter, enter - RESOLVIDO RETIRANDO limpar_buffer de detrás de ler_data.
-nacionalidade, dou enter, enter
-matriculas está bem
-ects também
-ano também
-media também

repetir com 's' fica o ecrã empty e nem com enter reinicia. Após escrever algo e dar enter aparece a mensagem de código inválido.

Solução: Não usar limpar_buffer exceto quando a entrada for CERTAMENTE inválida. Pode levar a strings erradas no entanto.

#BUG ARRAY + 1 @RESOLVIDO
//Foi assim que se deu debug
printf("%d\n", bd->aluno[0].codigo);
printf("%d\n", bd->aluno[bd->tamanho_aluno - 1].codigo);
merge_sort_aluno(bd, 0, bd->tamanho_aluno);
printf("%d\n", bd->aluno[0].codigo);
printf("%d\n", bd->aluno[bd->tamanho_aluno].codigo);

Problema: merge_sort_aluno(bd, 0, bd->tamanho_aluno); terceiro parametro tem que ser -1 caso contrário vamos incluir um -1 da inicializzção do array,
que vai vir para baixo no merge sort.

#BUG 0 NO ARRAY @RESOLVIDO
-Acontecia no indice 1000 e 2000 do array.
-O indice passava a 0 em vez de -1.

Solução: a realocação estava a verificar erradamente o tamanho do array em carregar_dados. Foi acrescentado o + 1 para resolver.


#BUG ELIMINAR ESTUDANTES
Como replicar:
-Inserir um estudante.
-Eliminar esse estudante.
-Repetir eliminação.
-Eliminar 1234.

O programa fecha abruptamente

#BUG menu aceita 22 @RESOLVIDO
Solução: Adicionada nova verificação em validacao_menus

#BUG nacionalidade aceita 2 espaços seguidos


#BUG CAPACIDADE_ESCOLARES 
-está a ficar a 4000 por algum motivo
______________________________________________________________________________________________________________

A REVER SE TIVER TEMPO:
-Sugestões em procurar_nacionalidades:
    em principio esta tudo ok, mas não foi testado no caso de haver mais nacionalidades com nomes semelhantes e continuar sempre a negar a sugestão
    para isso seria necessário alterar o ficheiro de dados, algo que deve ser feito

-Além disso, deve ser feito um scan com o valgrind às funções mais prováveis de ter memory leaks, como a de procurar_nacionalidades.
-Códigos duplicados 
-mudar for loops para usa size_t caso não seja necesssário o i para printar (ver melhor)

______________________________________________________________________________________________________________

FUTURAMENTE:

-opcao linguagem
-ler ficheiro erros.txt e printar os erros.
-eliminação de códigos por intervalos
-adicionar listagem em .md (markdown)
-implementar um checksum para evitar calcular as estatísticas tantas vezes.
-Fazer uma espécie de autosaves sobre dados adicionais, para a funcionalidade de guardar os dados em binário

______________________________________________________________________________________________________________

A ANOTAR NO RELATÓRIO

-Tentámos usar o menor num de librarias extra possível.
-separar_parametros podia ter sido substituido por strtok mas nós já tinhamos feito a função antes de saber da existência dessa função no moodle, então acabamos por deixa la no código

-O error management na questão dos files podia ter sido melhor se usassemos a biblioteca errno.h
-O código está estruturado de modo a possibilitar a adição de novas features no futuro.
-Nacionalidade apesar do array estar limitado, está estruturado no código de modo a que seja fácil fazer a sua realocação, apenas seria necessário fazer uma função para o efeito.
-Em carregar_dados, foi utilizado a var primeiro_erro como alternativa a criar um array e guardar lá os erros(poupa memória)
-A escrita em erros.txt estava a sair desformatada com os \n's, então modificamos a função ler_linha_txt para eliminar o \n no final, apesar das outras funções já terem essa funcionalidade(validações, separar_parametros, etc)
-Em carregar_dados foi usado merge_sort pois mantém a ordem pelo qual os dados foram inseridos(importante no caso de duplicados)
-Podíamos ter feito uma função para generalizar o código das nacionalidades mas por constragimentos de tempo não foi possível(até porque iria aacarretar mais alterações em outras partes do código),
mas essencialemente iria passar por fazer uma iteração O(n) e depois agrupar todos os alunos de uma nacionalidade através do índice ou código. Depois bastava encontrar um aluno dessa nacionalidade e tínhamos todos.
Podia-se ainda passar todas as nacionalidades para um array. Tudo isto, claro, requeria atualização quase constante.